#!/usr/bin/env python
import PySimpleGUI as sg    #INSTALL WITH COMMAND: "pip install pysimplegui"  FOR UBUNTU also: "sudo apt install python3-tk"
import platform
import subprocess
import os
import sys
import configparser
import urllib.request
import base64
import mynotify

version = ' v0.6'

video_b64img=b'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'
audio_b64img=b''
icon_b64_64=b'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'

allthemes = ['Black', 'BlueMono', 'BluePurple', 'BrightColors', 'BrownBlue', 'Dark', 'Dark2', 'DarkAmber', 'DarkBlack', 'DarkBlack1', 'DarkBlue', 'DarkBlue1', 'DarkBlue10', 'DarkBlue11', 'DarkBlue12', 'DarkBlue13', 'DarkBlue14', 'DarkBlue15', 'DarkBlue16', 'DarkBlue17', 'DarkBlue2', 'DarkBlue3', 'DarkBlue4', 'DarkBlue5', 'DarkBlue6', 'DarkBlue7', 'DarkBlue8', 'DarkBlue9', 'DarkBrown', 'DarkBrown1', 'DarkBrown2', 'DarkBrown3', 'DarkBrown4', 'DarkBrown5', 'DarkBrown6', 'DarkBrown7', 'DarkGreen', 'DarkGreen1', 'DarkGreen2', 'DarkGreen3', 'DarkGreen4', 'DarkGreen5', 'DarkGreen6', 'DarkGreen7', 'DarkGrey', 'DarkGrey1', 'DarkGrey10', 'DarkGrey11', 'DarkGrey12', 'DarkGrey13', 'DarkGrey14', 'DarkGrey2', 'DarkGrey3', 'DarkGrey4', 'DarkGrey5', 'DarkGrey6', 'DarkGrey7', 'DarkGrey8', 'DarkGrey9', 'DarkPurple', 'DarkPurple1', 'DarkPurple2', 'DarkPurple3', 'DarkPurple4', 'DarkPurple5', 'DarkPurple6', 'DarkPurple7', 'DarkRed', 'DarkRed1', 'DarkRed2', 'DarkTanBlue', 'DarkTeal', 'DarkTeal1', 'DarkTeal10', 'DarkTeal11', 'DarkTeal12', 'DarkTeal2', 'DarkTeal3', 'DarkTeal4', 'DarkTeal5', 'DarkTeal6', 'DarkTeal7', 'DarkTeal8', 'DarkTeal9', 'Default', 'Default1', 'DefaultNoMoreNagging', 'GrayGrayGray', 'Green', 'GreenMono', 'GreenTan', 'HotDogStand', 'Kayak', 'LightBlue', 'LightBlue1', 'LightBlue2', 'LightBlue3', 'LightBlue4', 'LightBlue5', 'LightBlue6', 'LightBlue7', 'LightBrown', 'LightBrown1', 'LightBrown10', 'LightBrown11', 'LightBrown12', 'LightBrown13', 'LightBrown2', 'LightBrown3', 'LightBrown4', 'LightBrown5', 'LightBrown6', 'LightBrown7', 'LightBrown8', 'LightBrown9', 'LightGray1', 'LightGreen', 'LightGreen1', 'LightGreen10', 'LightGreen2', 'LightGreen3', 'LightGreen4', 'LightGreen5', 'LightGreen6', 'LightGreen7', 'LightGreen8', 'LightGreen9', 'LightGrey', 'LightGrey1', 'LightGrey2', 'LightGrey3', 'LightGrey4', 'LightGrey5', 'LightGrey6', 'LightPurple', 'LightTeal', 'LightYellow', 'Material1', 'Material2', 'NeutralBlue', 'Purple', 'Python', 'Reddit', 'Reds', 'SandyBeach', 'SystemDefault', 'SystemDefault1', 'SystemDefaultForReal', 'Tan', 'TanBlue', 'TealMono', 'Topanga']
ttk_theme='default'

# Download the file from `url` and save it locally under `file_name`:
def downloadFile(url, file_name):
    with urllib.request.urlopen(url) as response, open(file_name, 'wb') as out_file:
        data = response.read() # a `bytes` object
        out_file.write(data)

#START CONFIG FILE HANDLING
def updateConfigFile():
    with open('ytdlp-gui.ini', 'w') as configfile:								#open config file for writing. if it does not exist it will be created.
        config.write(configfile)												#write the config variable data to config file

config = configparser.ConfigParser()											#define config data varaiable
if not os.path.exists('ytdlp-gui.ini'):											#if config file does not exist
    config['DEFAULT'] = {														#define file contents
        'Language':'bg',
        'theme':'SystemDefault1',
        'console_bg_color':'black',
        'console_text_color':'white',
        'ytdlp_url_win':'https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_x86.exe',
        'ytdlp_url_lin':'https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp',
        'ytdlp_url_mac':'https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_macos',
        }
    updateConfigFile()															#write to config file

config.read('ytdlp-gui.ini')													#read config file
setLocal = config.get('DEFAULT','Language')										#get language from config file language key
setTheme = config.get('DEFAULT','theme')										#get theme from config file theme key
console_bg_color = config.get('DEFAULT','console_bg_color')
console_text_color = config.get('DEFAULT','console_text_color')
ytdlp_url_win = config.get('DEFAULT','ytdlp_url_win')
ytdlp_url_lin = config.get('DEFAULT','ytdlp_url_lin')
ytdlp_url_mac = config.get('DEFAULT','ytdlp_url_mac')
#END CONFIG FILE HANDLING

sg.theme(setTheme)

if not os.path.exists('Downloads'):												#If folder Downloads in current directory does not exist
    os.makedirs('Downloads')													#Create Downloads directory

locale = {
    "bg": {
        #'complete'     : "Завърши!",
        'download_of'  : "Изтеглянето на:\n",
        'dcomplete_msg': "Завърши! Изтеглянето на:\n",
        'MaxRez'       : "Макс. резолюция",
        'about'        : "Елементарен графичен интерфейс за командната програма yt-dlp. Писана на Python3, PySimpleGUI(tk) и notify-py ",
        'about2'       : "Автор: Илиян Пиргозлиев / 2022",
        'url'          : "сложи URL тук ->",
        'video'        : "Видео",
        'audio'        : "Аудио",
        'settings'     : "Настройки(Settings)",
        'abouttab'     : "За програмата",
        'open_dldir'   : "Отвори папка с изтеглени",
        'download'     : "Изтегли",
        'apply'        : "Приложи",
        'downytdlpbin' : "Изтегли yt-dlp",
        'nourl'        : "Трябва да зададете URL!",
        'emb_sub'      : "само за видео формати mp4,webm,mkv",
        #'emb_thmb'    : "само за аудио формати",
        'console'      : "данните от yt-dlp ще се изпишат тук:",
    },
    "en": {
        #'complete'     : "Complete!",
        'download_of'  : "Download of:\n",
        'dcomplete_msg': "Complete! Download of:\n",
        'MaxRez'       : "Max. resolution",
        'about'        : "Simple graphical interface for yt-dlp. Writen in Python3, PySimpleGUI(tk) and notify-py ",
        'about2'       : "Author: Iliyan Pirgozliev / 2022",
        'url'          : "put URL here ->",
        'video'        : "Video",
        'audio'        : "Audio",
        'settings'     : "Settings",
        'abouttab'     : "About",
        'open_dldir'   : "Open downloads folder",
        'download'     : "Download",
        'apply'        : "Apply",
        'downytdlpbin' : "Download yt-dlp",
        'nourl'        : "You must enter a URL!",
        'emb_sub'      : "only for video format mp4,webm,mkv",
        #'emb_thmb'    : "only for audio formats",
        'console'      : "yt-dlp console output will be printed here:",
    }
}

def ShellOpen(path='Downloads'):
	subprocess.run([ shell_open, path ])

def run_cmd(cmd):
    proc=subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, creationflags = HIDE_WINDOW)
    for line in proc.stdout:
        sys.stdout.write(line.decode("utf-8") )
        print(line, flush=True)
    proc.wait()

if platform.system() == "Windows":
    if setTheme == 'SystemDefault1': ttk_theme='vista'
    FONTS='Tahoma 10'
    slash='\\'
    shell_open='start'
    ytdlp_url = ytdlp_url_win
    HIDE_WINDOW = 0x08000000
    def ShellOpen(path='Downloads'):
        subprocess.run([ shell_open, path ], shell=True)

elif platform.system() == "Linux":
    if setTheme == 'SystemDefault1': ttk_theme='clam'
    FONTS='Ubuntu 9'
    slash='/'
    shell_open='xdg-open'
    HIDE_WINDOW = 0
    ytdlp_url = ytdlp_url_lin

elif platform.system() == 'Darwin':
    if setTheme == 'SystemDefault1': ttk_theme='clam'
    FONTS='arial 9'
    slash='/'
    shell_open='open'
    HIDE_WINDOW = 0
    ytdlp_url = ytdlp_url_mac

def rungui():
    VideoTablayout = [[
        sg.Column([
            [sg.Image(video_b64img, size=(120,100))]
            ]),
        sg.Column([
            [sg.Radio('Auto', "RADIO1", key='-AUTV-', default=True,  pad=(0,0), size=(6,1)), sg.Radio('Webm', "RADIO1", key='-WEBM-', size=(6,1)), sg.Text(locale[setLocal]['MaxRez'], expand_x=True)],
            [sg.Radio('Mp4 ', "RADIO1", key='-MP4-', size=(6,1)), sg.Radio('Mkv ', "RADIO1", key='-MKV-', size=(6,1)), sg.Combo(['Auto','144','240','360','480','720','1080','1440','2160'], default_value='Auto', key=('-REZ-'), expand_x=True)],
            [sg.Radio('Flv ', "RADIO1", key='-FLV-', size=(6,1)), sg.Radio('Avi ', "RADIO1", key='-AVI-', size=(6,1)), sg.Checkbox('Embed Sub', key='-EMBSUB-', tooltip=locale[setLocal]['emb_sub'])],
            [sg.Radio('Ogg ', "RADIO1", key='-OGG-', size=(6,1))]
            ], expand_x=True)
        ]]
    AudioTablayout = [[
        sg.Column([
            [sg.Image(audio_b64img, size=(120,100))]
            ]),
        sg.Column([
            [sg.Radio('Auto', "RADIO2", key='-AUTA-', default=True,  pad=(0,0), size=(6,1)), sg.Radio('m4a ', "RADIO2", key='-M4A-', size=(4,1)), sg.Checkbox('Embed Thumb', default=True, key='-EMBTHMB-', pad=((6,0),(0,0)))],
            [sg.Radio('Mp3 ', "RADIO2", key='-MP3-', size=(6,1)), sg.Radio('opus', "RADIO2", key='-OPUS-', size=(4,1))],
            [sg.Radio('AAC ', "RADIO2", key='-AAC-', size=(6,1)), sg.Radio('wav ', "RADIO2", key='-WAV-', size=(4,1))],
            [sg.Radio('Flac', "RADIO2", key='-FLAC-', size=(6,1))]
            ])
        ]]
    ConfigTablayout = [
        [sg.Text('Language:', pad=((10,0),(5,0))), sg.Combo(['bg','en'], default_value=setLocal, key='-LANG-', pad=((0,0),(6,0))), sg.Text('Theme:',pad=((10,0),(5,0))), sg.Combo(allthemes, default_value=setTheme, key='-THEME-', pad=((0,0),(5,0))) ],
        [sg.Button(locale[setLocal]['downytdlpbin'],key='-GET1-', pad=((10,0),(40,5)), size=(20,1)), sg.Push(), sg.Button(locale[setLocal]['apply'], key='-APPLY-', pad=((0,10),(40,5)), size=(8,1))]
        ]
    AboutTablayout = [
        [sg.Text(locale[setLocal]['about'], pad=((10,0),(5,0)), size=(50,0) )],
        [sg.Button('Project Home:',key='-GOHOME-', pad=((10,0),(0,0))), sg.Input('https://github.com/JmanJulian/ytdlp-gui', key='-HOMEPAGE-', pad=((0,3),(0,0)))],
        [sg.Text(locale[setLocal]['about2'], pad=((10,0),(0,0)) )]
        ]

    MainWinlayout = [
        [sg.Text(locale[setLocal]['url'], pad=((4,0),(3,0))), sg.Input("", key='-URL-', right_click_menu=[[''], ['Paste']], size=(100,20), pad=((0,4),(5,0)) )],
        [sg.TabGroup([
            [ sg.Tab(locale[setLocal]['video'],    VideoTablayout, key='-VIDEO-') ],
            [ sg.Tab(locale[setLocal]['audio'],    AudioTablayout, key='-AUDIO-') ],
            [ sg.Tab(locale[setLocal]['settings'], ConfigTablayout, key='-CONF-') ],
            [ sg.Tab(locale[setLocal]['abouttab'], AboutTablayout, key='-ABOUT-') ]
            ], key=('-TAB-'), expand_x=True)],
        [sg.Button(locale[setLocal]['open_dldir'], key='-ODL-', expand_x=True), sg.B('⥯',key='-UPDOWN-'), sg.Button(locale[setLocal]['download'], key='-DL-', expand_x=True)],
        [sg.Multiline(size=(360,6),background_color=console_bg_color, text_color=console_text_color,reroute_stdout=True,reroute_cprint=True,reroute_stderr=True,autoscroll=True, auto_refresh=True, key='-CONSOLE-')]
        ]

    window = sg.Window("Ytdlp-GUI"+version,MainWinlayout, size=(380,280),
        ttk_theme=ttk_theme, use_ttk_buttons=True,
        element_padding=(0,0),
        margins=(0,0),
        font=FONTS,
        resizable=False,
        finalize=True
    )
    return window

window = rungui()
print(locale[setLocal]['console'])

while True:
    event, values = window.read()
    #print(event, values)
    if event == sg.WIN_CLOSED or event=="Exit":
        break
        window.close()
        exit

    if event == 'Paste':
        window['-URL-'].update(sg.clipboard_get())

    if event == '-ODL-':
        ShellOpen()

    if event == '-DL-':
        if values['-URL-'] == "":
            sg.popup(locale[setLocal]['nourl'])
            continue

        if values['-TAB-'] == '-VIDEO-':
            vformat=''
            convert_to='--recode-video='
            resolution = ''
            recode_to = ''
            if values['-MP4-']: vformat='mp4'
            if values['-FLV-']: vformat='flv'
            if values['-OGG-']: vformat='ogg'
            if values['-WEBM-']:vformat='webm'
            if values['-MKV-']: vformat='mkv'
            if values['-AVI-']: vformat='avi'
            if not values['-AUTV-']: recode_to= "--recode-video=" + vformat
            if values['-REZ-'] != 'Auto':
                resolution = "-f bestvideo[height<=" + values['-REZ-'] + "]+bestaudio"
            embed_sub = '--no-embed-subs'
            if values['-EMBSUB-']: embed_sub = '--embed-subs'
            run_cmd(['./yt-dlp', values['-URL-'], resolution, embed_sub, recode_to, '--output=Downloads'+slash+'%(uploader)s%(title)s.%(ext)s'])
            mynotify.notify(title="Ytdlp-gui", msg=locale[setLocal]['dcomplete_msg']+values['-URL-'], timeout=5, icon=icon_b64_64)
        if values['-TAB-'] == '-AUDIO-':
            aformat='best'
            convert_to='--audio-format='
            if values['-MP3-']: aformat='mp3'
            if values['-AAC-']: aformat='aac'
            if values['-FLAC-']:aformat='flac'
            if values['-M4A-']: aformat='m4a'
            if values['-OPUS-']:aformat='opus'
            if values['-WAV-']: aformat='wav'
            embed_thumb = '--no-embed-thumbnail'
            if values['-EMBTHMB-']: embed_thumb = '--embed-thumbnail'
            run_cmd(['./yt-dlp', values['-URL-'], '-x', convert_to+aformat, embed_thumb,'--output=Downloads'+slash+'%(uploader)s%(title)s.%(ext)s'])

            mynotify.notify(title="Ytdlp-gui", msg=locale[setLocal]['dcomplete_msg']+values['-URL-'], timeout=5, icon=icon_b64_64)

    if event == '-APPLY-':
        if setLocal != values['-LANG-']:
            setLocal = values['-LANG-']
            config.set('DEFAULT','Language', setLocal)
            updateConfigFile()
            window.close()
            window = rungui()
        if values['-THEME-'] != setTheme:
            setTheme = values['-THEME-']
            sg.theme(setTheme)
            config.set('DEFAULT','theme', setTheme)
            updateConfigFile()
            ttk_theme='default'
            window.close()
            window = rungui()
            print('Theme change to:' + sg.theme())

    if event == '-GET1-':
        downloadFile(ytdlp_url, 'yt-dlp')
        os.chmod("./yt-dlp", 0o775)
        mynotify.notify(title="Ytdlp-gui", msg=locale[setLocal]['dcomplete_msg']+ytdlp_url, timeout=5, icon=icon_b64_64)

    if event == '-GOHOME-':
        ShellOpen(values['-HOMEPAGE-'])

    if event == '-UPDOWN-':
        if window['-CONSOLE-'].visible:
            window['-CONSOLE-'].update(visible=False)
            window.Size=(380,183)
        else:
            window['-CONSOLE-'].update(visible=True)
            window.Size=(380,280)
